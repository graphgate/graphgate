"""
The `Int` scalar type represents non-fractional whole numeric values.
"""
scalar Int

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

"""
ID scalar
"""
scalar ID

"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(
  "Included when true."
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(
  "Skipped when true."
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
  "Location adjacent to a query operation."
  QUERY

  "Location adjacent to a mutation operation."
  MUTATION

  "Location adjacent to a subscription operation."
  SUBSCRIPTION

  "Location adjacent to a field."
  FIELD

  "Location adjacent to a fragment definition."
  FRAGMENT_DEFINITION

  "Location adjacent to a fragment spread."
  FRAGMENT_SPREAD

  "Location adjacent to an inline fragment."
  INLINE_FRAGMENT

  "Location adjacent to a variable definition."
  VARIABLE_DEFINITION

  "Location adjacent to a schema definition."
  SCHEMA

  "Location adjacent to a scalar definition."
  SCALAR

  "Location adjacent to an object type definition."
  OBJECT

  "Location adjacent to a field definition."
  FIELD_DEFINITION

  "Location adjacent to an argument definition."
  ARGUMENT_DEFINITION

  "Location adjacent to an interface definition."
  INTERFACE

  "Location adjacent to a union definition."
  UNION

  "Location adjacent to an enum definition."
  ENUM

  "Location adjacent to an enum value definition."
  ENUM_VALUE

  "Location adjacent to an input object type definition."
  INPUT_OBJECT

  "Location adjacent to an input object field definition."
  INPUT_FIELD_DEFINITION
}

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.
"""
type __Directive {
  name: String!
  description: String
  locations: [__DirectiveLocation!]!
  args: [__InputValue!]!
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
  name: String!
  description: String
  isDeprecated: Boolean!
  deprecationReason: String
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
  name: String!
  description: String
  args: [__InputValue!]!
  type: __Type!
  isDeprecated: Boolean!
  deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
  name: String!
  description: String
  type: __Type!
  defaultValue: String
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
  "Indicates this type is a scalar."
  Scalar

  "Indicates this type is an object. `fields` and `interfaces` are valid fields."
  Object

  "Indicates this type is an interface. `fields` and `possibleTypes` are valid fields."
  Interface

  "Indicates this type is a union. `possibleTypes` is a valid field."
  Union

  "Indicates this type is an enum. `enumValues` is a valid field."
  Enum

  "Indicates this type is an input object. `inputFields` is a valid field."
  InputObject

  "Indicates this type is a list. `ofType` is a valid field."
  List

  "Indicates this type is a non-null. `ofType` is a valid field."
  NonNull
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
  kind: __TypeKind
  name: String
  description: String
  fields(includeDeprecated: Boolean! = false): [__Field!]
  interfaces: [__Type!]
  possibleTypes: [__Type!]
  enumValues(includeDeprecated: Boolean! = false): [__EnumValue!]
  inputFields: [__InputValue!]
  ofType: __Type
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  types: [__Type!]
  queryType: __Type!
  mutationType: __Type
  subscriptionType: __Type
  directives: [__Directive!]!
}

# Federation v2 required definitions
scalar link__Import

"""
Links definitions from an external specification to this schema.
"""
directive @link(
  url: String!
  as: String
  import: [link__Import]
) repeatable on SCHEMA

"""
Marks a type as shareable across subgraphs.
"""
directive @shareable on FIELD_DEFINITION | OBJECT

"""
Marks a field as the key for an entity.
"""
directive @key(
  fields: String!
  resolvable: Boolean = true
) repeatable on OBJECT | INTERFACE

"""
Indicates that a field can fetch specific subfields of an entity defined in another service.
"""
directive @provides(fields: String!) on FIELD_DEFINITION

"""
Indicates that a field requires specific subfields of an entity from another service.
"""
directive @requires(fields: String!) on FIELD_DEFINITION

"""
Indicates that a field is external and defined in another service.
"""
directive @external on FIELD_DEFINITION

"""
Indicates that a field or type should not be included in the API schema.
"""
directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ENUM | SCALAR | INPUT_OBJECT

"""
Overrides a field definition from another service.
"""
directive @override(from: String!) on FIELD_DEFINITION

"""
Adds metadata to a field or type.
"""
directive @tag(
  name: String!
) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ENUM | SCALAR | INPUT_OBJECT

"""
Indicates that an interface is an entity type that can be referenced by other subgraphs.
"""
directive @interfaceObject on INTERFACE

"""
Indicates that a custom directive should be composed into the supergraph schema.
"""
directive @composeDirective on SCHEMA
